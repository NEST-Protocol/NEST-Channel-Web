/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import { Listener, Provider } from '@ethersproject/providers'
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common'

export type ConfigStruct = { nestRewardScale: BigNumberish }

export type ConfigStructOutput = [number] & { nestRewardScale: number }

export interface NestLedgerInterface extends utils.Interface {
  functions: {
    '_governance()': FunctionFragment
    'addETHReward(address)': FunctionFragment
    'carveETHReward(address)': FunctionFragment
    'checkApplication(address)': FunctionFragment
    'getConfig()': FunctionFragment
    'initialize(address)': FunctionFragment
    'migrate(address,uint256)': FunctionFragment
    'pay(address,address,address,uint256)': FunctionFragment
    'setApplication(address,uint256)': FunctionFragment
    'setConfig((uint16))': FunctionFragment
    'settle(address,address,address,uint256)': FunctionFragment
    'totalETHRewards(address)': FunctionFragment
    'update(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: '_governance', values?: undefined): string
  encodeFunctionData(functionFragment: 'addETHReward', values: [string]): string
  encodeFunctionData(functionFragment: 'carveETHReward', values: [string]): string
  encodeFunctionData(functionFragment: 'checkApplication', values: [string]): string
  encodeFunctionData(functionFragment: 'getConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'initialize', values: [string]): string
  encodeFunctionData(functionFragment: 'migrate', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'pay', values: [string, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setApplication', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setConfig', values: [ConfigStruct]): string
  encodeFunctionData(functionFragment: 'settle', values: [string, string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'totalETHRewards', values: [string]): string
  encodeFunctionData(functionFragment: 'update', values: [string]): string

  decodeFunctionResult(functionFragment: '_governance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addETHReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'carveETHReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkApplication', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pay', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApplication', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalETHRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result

  events: {
    'ApplicationChanged(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ApplicationChanged'): EventFragment
}

export type ApplicationChangedEvent = TypedEvent<[string, BigNumber], { addr: string; flag: BigNumber }>

export type ApplicationChangedEventFilter = TypedEventFilter<ApplicationChangedEvent>

export interface NestLedger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: NestLedgerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    _governance(overrides?: CallOverrides): Promise<[string]>

    addETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    carveETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    checkApplication(addr: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getConfig(overrides?: CallOverrides): Promise<[ConfigStructOutput]>

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    pay(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setApplication(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setConfig(
      config: ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    settle(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    totalETHRewards(ntokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  _governance(overrides?: CallOverrides): Promise<string>

  addETHReward(
    ntokenAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  carveETHReward(
    ntokenAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  checkApplication(addr: string, overrides?: CallOverrides): Promise<BigNumber>

  getConfig(overrides?: CallOverrides): Promise<ConfigStructOutput>

  initialize(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  migrate(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  pay(
    ntokenAddress: string,
    tokenAddress: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setApplication(
    addr: string,
    flag: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setConfig(
    config: ConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  settle(
    ntokenAddress: string,
    tokenAddress: string,
    to: string,
    value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  totalETHRewards(ntokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  update(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    _governance(overrides?: CallOverrides): Promise<string>

    addETHReward(ntokenAddress: string, overrides?: CallOverrides): Promise<void>

    carveETHReward(ntokenAddress: string, overrides?: CallOverrides): Promise<void>

    checkApplication(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    getConfig(overrides?: CallOverrides): Promise<ConfigStructOutput>

    initialize(nestGovernanceAddress: string, overrides?: CallOverrides): Promise<void>

    migrate(tokenAddress: string, value: BigNumberish, overrides?: CallOverrides): Promise<void>

    pay(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setApplication(addr: string, flag: BigNumberish, overrides?: CallOverrides): Promise<void>

    setConfig(config: ConfigStruct, overrides?: CallOverrides): Promise<void>

    settle(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    totalETHRewards(ntokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    update(nestGovernanceAddress: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'ApplicationChanged(address,uint256)'(addr?: null, flag?: null): ApplicationChangedEventFilter
    ApplicationChanged(addr?: null, flag?: null): ApplicationChangedEventFilter
  }

  estimateGas: {
    _governance(overrides?: CallOverrides): Promise<BigNumber>

    addETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    carveETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    checkApplication(addr: string, overrides?: CallOverrides): Promise<BigNumber>

    getConfig(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    pay(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setApplication(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setConfig(config: ConfigStruct, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    settle(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    totalETHRewards(ntokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    carveETHReward(
      ntokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    checkApplication(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    pay(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setApplication(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setConfig(
      config: ConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    settle(
      ntokenAddress: string,
      tokenAddress: string,
      to: string,
      value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    totalETHRewards(ntokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
